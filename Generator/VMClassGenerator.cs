using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace MinimalisticWPF.Generator
{
    [Generator]
    public class VMClassGenerator : IIncrementalGenerator
    {
        private static int FileId { get; set; } = 0;
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var classDeclarations = AnalizeHelper.DefiningFilter(context);
            var compilationAndClasses = AnalizeHelper.GetValue(context, classDeclarations);
            context.RegisterSourceOutput(compilationAndClasses, GenerateSource);
        }
        private static void GenerateSource(SourceProductionContext context, (Compilation Compilation, ImmutableArray<ClassDeclarationSyntax> Classes) input)
        {
            var (compilation, classes) = input;

            Dictionary<Tuple<INamedTypeSymbol, ClassDeclarationSyntax>, StringBuilder> generatedSources = [];

            foreach (var classDeclaration in classes)
            {
                SemanticModel model = compilation.GetSemanticModel(classDeclaration.SyntaxTree);
                var classSymbol = model.GetDeclaredSymbol(classDeclaration);
                if (classSymbol == null)
                    continue;

                var classRoslyn = new ClassRoslyn(classDeclaration, classSymbol);

                if (!(classRoslyn.IsViewModel || classRoslyn.IsAop || classRoslyn.IsDynamicTheme)) continue;

                if (!generatedSources.TryGetValue(Tuple.Create(classSymbol, classDeclaration), out var sourceBuilder))
                {
                    sourceBuilder = new StringBuilder();
                    sourceBuilder.AppendLine($"// <auto-generated/>");
                    sourceBuilder.AppendLine(classRoslyn.GenerateUsing());
                    sourceBuilder.AppendLine(classRoslyn.GenerateNamespace());
                    sourceBuilder.AppendLine(classRoslyn.GeneratePartialClass());
                    sourceBuilder.AppendLine(classRoslyn.GenerateConstructor());
                    sourceBuilder.AppendLine(classRoslyn.GenerateIPC());
                    sourceBuilder.AppendLine(classRoslyn.GenerateITA());
                    sourceBuilder.AppendLine(classRoslyn.GenerateHoverControl());
                    foreach (var fieldRoslyn in classRoslyn.FieldRoslyns)
                    {
                        sourceBuilder.AppendLine(fieldRoslyn.GenerateCode());
                    }
                    sourceBuilder.AppendLine(classRoslyn.GenerateEnd());
                    generatedSources[Tuple.Create(classSymbol, classDeclaration)] = sourceBuilder;
                }
            }
            foreach (var kvp in generatedSources)
            {
                context.AddSource($"[{FileId}]{kvp.Key.Item1.ContainingNamespace.ToString().Replace('.', '_')}_{kvp.Key.Item2.Identifier.Text}_VMClass.g.cs", SourceText.From(kvp.Value.ToString(), Encoding.UTF8));
                FileId++;
            }
        }
    }
}
